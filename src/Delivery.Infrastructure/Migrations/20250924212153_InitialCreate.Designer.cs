// <auto-generated />
using System;
using Delivery.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Delivery.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250924212153_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AllergenCustomer", b =>
                {
                    b.Property<Guid>("AllergensId")
                        .HasColumnType("uuid")
                        .HasColumnName("allergens_id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.HasKey("AllergensId", "CustomerId")
                        .HasName("pk_allergen_customer");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_allergen_customer_customer_id");

                    b.ToTable("allergen_customer", (string)null);
                });

            modelBuilder.Entity("AllergenDish", b =>
                {
                    b.Property<Guid>("AllergensId")
                        .HasColumnType("uuid")
                        .HasColumnName("allergens_id");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid")
                        .HasColumnName("dish_id");

                    b.HasKey("AllergensId", "DishId")
                        .HasName("pk_allergen_dish");

                    b.HasIndex("DishId")
                        .HasDatabaseName("ix_allergen_dish_dish_id");

                    b.ToTable("allergen_dish", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Entities.DishEntities.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid")
                        .HasColumnName("menu_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_dishes");

                    b.HasIndex("MenuId")
                        .HasDatabaseName("ix_dishes_menu_id");

                    b.ToTable("dishes", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Entities.DishEntities.DishOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("DishOptionGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("dish_option_group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_dish_options");

                    b.HasIndex("DishOptionGroupId")
                        .HasDatabaseName("ix_dish_options_dish_option_group_id");

                    b.ToTable("dish_options", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Entities.DishEntities.DishOptionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid")
                        .HasColumnName("dish_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_dish_option_groups");

                    b.HasIndex("DishId")
                        .HasDatabaseName("ix_dish_option_groups_dish_id");

                    b.ToTable("dish_option_groups", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Entities.HelperEntities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<string>("StreetAndNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street_and_number");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_addresses_customer_id");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Entities.HelperEntities.Allergen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_allergens");

                    b.ToTable("allergens", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Entities.HelperEntities.WorkSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CourierId")
                        .HasColumnType("uuid")
                        .HasColumnName("courier_id");

                    b.Property<Guid?>("RestaurantId")
                        .HasColumnType("uuid")
                        .HasColumnName("restaurant_id");

                    b.Property<int>("WeekDay")
                        .HasColumnType("integer")
                        .HasColumnName("week_day");

                    b.Property<TimeSpan>("WorkEnd")
                        .HasColumnType("time")
                        .HasColumnName("work_end");

                    b.Property<TimeSpan>("WorkStart")
                        .HasColumnType("time")
                        .HasColumnName("work_start");

                    b.Property<Guid?>("WorkerId")
                        .HasColumnType("uuid")
                        .HasColumnName("worker_id");

                    b.HasKey("Id")
                        .HasName("pk_work_schedules");

                    b.HasIndex("CourierId")
                        .HasDatabaseName("ix_work_schedules_courier_id");

                    b.HasIndex("RestaurantId")
                        .HasDatabaseName("ix_work_schedules_restaurant_id");

                    b.HasIndex("WorkerId")
                        .HasDatabaseName("ix_work_schedules_worker_id");

                    b.ToTable("work_schedules", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Entities.RestaurantEntities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid")
                        .HasColumnName("restaurant_id");

                    b.HasKey("Id")
                        .HasName("pk_menus");

                    b.HasIndex("RestaurantId")
                        .HasDatabaseName("ix_menus_restaurant_id");

                    b.ToTable("menus", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Entities.RestaurantEntities.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("pk_restaurants");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasDatabaseName("ix_restaurants_address_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_restaurants_owner_id");

                    b.ToTable("restaurants", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Entities.UserEntities.Administrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_administrators");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_administrators_user_id");

                    b.ToTable("administrators", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Entities.UserEntities.Courier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("WorkStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("work_status");

                    b.HasKey("Id")
                        .HasName("pk_couriers");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_couriers_user_id");

                    b.ToTable("couriers", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Entities.UserEntities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_customers_user_id");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Entities.UserEntities.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_owners");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_owners_user_id");

                    b.ToTable("owners", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Entities.UserEntities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture_url");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Entities.UserEntities.Worker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("boolean")
                        .HasColumnName("is_suspended");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid")
                        .HasColumnName("restaurant_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_workers");

                    b.HasIndex("RestaurantId")
                        .HasDatabaseName("ix_workers_restaurant_id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_workers_user_id");

                    b.ToTable("workers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AllergenCustomer", b =>
                {
                    b.HasOne("Delivery.Domain.Entities.HelperEntities.Allergen", null)
                        .WithMany()
                        .HasForeignKey("AllergensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_allergen_customer_allergens_allergens_id");

                    b.HasOne("Delivery.Domain.Entities.UserEntities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_allergen_customer_customers_customer_id");
                });

            modelBuilder.Entity("AllergenDish", b =>
                {
                    b.HasOne("Delivery.Domain.Entities.HelperEntities.Allergen", null)
                        .WithMany()
                        .HasForeignKey("AllergensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_allergen_dish_allergens_allergens_id");

                    b.HasOne("Delivery.Domain.Entities.DishEntities.Dish", null)
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_allergen_dish_dishes_dish_id");
                });

            modelBuilder.Entity("Delivery.Domain.Entities.DishEntities.Dish", b =>
                {
                    b.HasOne("Delivery.Domain.Entities.RestaurantEntities.Menu", "Menu")
                        .WithMany("Dishes")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dishes_menus_menu_id");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Delivery.Domain.Entities.DishEntities.DishOption", b =>
                {
                    b.HasOne("Delivery.Domain.Entities.DishEntities.DishOptionGroup", null)
                        .WithMany("DishOptions")
                        .HasForeignKey("DishOptionGroupId")
                        .HasConstraintName("fk_dish_options_dish_option_groups_dish_option_group_id");
                });

            modelBuilder.Entity("Delivery.Domain.Entities.DishEntities.DishOptionGroup", b =>
                {
                    b.HasOne("Delivery.Domain.Entities.DishEntities.Dish", "Dish")
                        .WithMany("DishOptionGroups")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dish_option_groups_dishes_dish_id");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("Delivery.Domain.Entities.HelperEntities.Address", b =>
                {
                    b.HasOne("Delivery.Domain.Entities.UserEntities.Customer", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_addresses_customers_customer_id");
                });

            modelBuilder.Entity("Delivery.Domain.Entities.HelperEntities.WorkSchedule", b =>
                {
                    b.HasOne("Delivery.Domain.Entities.UserEntities.Courier", null)
                        .WithMany("WorkSchedules")
                        .HasForeignKey("CourierId")
                        .HasConstraintName("fk_work_schedules_couriers_courier_id");

                    b.HasOne("Delivery.Domain.Entities.RestaurantEntities.Restaurant", null)
                        .WithMany("WorkSchedules")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_work_schedules_restaurants_restaurant_id");

                    b.HasOne("Delivery.Domain.Entities.UserEntities.Worker", null)
                        .WithMany("WorkSchedules")
                        .HasForeignKey("WorkerId")
                        .HasConstraintName("fk_work_schedules_workers_worker_id");
                });

            modelBuilder.Entity("Delivery.Domain.Entities.RestaurantEntities.Menu", b =>
                {
                    b.HasOne("Delivery.Domain.Entities.RestaurantEntities.Restaurant", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_menus_restaurants_restaurant_id");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Delivery.Domain.Entities.RestaurantEntities.Restaurant", b =>
                {
                    b.HasOne("Delivery.Domain.Entities.HelperEntities.Address", "Address")
                        .WithOne()
                        .HasForeignKey("Delivery.Domain.Entities.RestaurantEntities.Restaurant", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_restaurants_addresses_address_id");

                    b.HasOne("Delivery.Domain.Entities.UserEntities.Owner", "Owner")
                        .WithMany("Restaurants")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_restaurants_owners_owner_id");

                    b.Navigation("Address");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Delivery.Domain.Entities.UserEntities.Administrator", b =>
                {
                    b.HasOne("Delivery.Domain.Entities.UserEntities.User", "User")
                        .WithOne()
                        .HasForeignKey("Delivery.Domain.Entities.UserEntities.Administrator", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_administrators_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Delivery.Domain.Entities.UserEntities.Courier", b =>
                {
                    b.HasOne("Delivery.Domain.Entities.UserEntities.User", "User")
                        .WithOne()
                        .HasForeignKey("Delivery.Domain.Entities.UserEntities.Courier", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_couriers_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Delivery.Domain.Entities.UserEntities.Customer", b =>
                {
                    b.HasOne("Delivery.Domain.Entities.UserEntities.User", "User")
                        .WithOne()
                        .HasForeignKey("Delivery.Domain.Entities.UserEntities.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customers_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Delivery.Domain.Entities.UserEntities.Owner", b =>
                {
                    b.HasOne("Delivery.Domain.Entities.UserEntities.User", "User")
                        .WithOne()
                        .HasForeignKey("Delivery.Domain.Entities.UserEntities.Owner", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_owners_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Delivery.Domain.Entities.UserEntities.Worker", b =>
                {
                    b.HasOne("Delivery.Domain.Entities.RestaurantEntities.Restaurant", "Restaurant")
                        .WithMany("Workers")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workers_restaurants_restaurant_id");

                    b.HasOne("Delivery.Domain.Entities.UserEntities.User", "User")
                        .WithOne()
                        .HasForeignKey("Delivery.Domain.Entities.UserEntities.Worker", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workers_users_user_id");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Delivery.Domain.Entities.UserEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Delivery.Domain.Entities.UserEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Delivery.Domain.Entities.UserEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Delivery.Domain.Entities.UserEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Delivery.Domain.Entities.DishEntities.Dish", b =>
                {
                    b.Navigation("DishOptionGroups");
                });

            modelBuilder.Entity("Delivery.Domain.Entities.DishEntities.DishOptionGroup", b =>
                {
                    b.Navigation("DishOptions");
                });

            modelBuilder.Entity("Delivery.Domain.Entities.RestaurantEntities.Menu", b =>
                {
                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("Delivery.Domain.Entities.RestaurantEntities.Restaurant", b =>
                {
                    b.Navigation("Menus");

                    b.Navigation("WorkSchedules");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("Delivery.Domain.Entities.UserEntities.Courier", b =>
                {
                    b.Navigation("WorkSchedules");
                });

            modelBuilder.Entity("Delivery.Domain.Entities.UserEntities.Customer", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Delivery.Domain.Entities.UserEntities.Owner", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("Delivery.Domain.Entities.UserEntities.Worker", b =>
                {
                    b.Navigation("WorkSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
